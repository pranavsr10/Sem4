Multi Processing
	---multiprocessing is a package that supports spawning processes using an API similar to the threading module.
	---The multiprocessing module also introduces APIs which do not have analogs in the threading module. A prime example of this is the Pool object which offers a convenient means of parallelizing the execution of a function across multiple input values, distributing the input data across processes (data parallelism).
	
	
	
   *	from multiprocessing import Pool

	def f(x):
	    return x*x

	if __name__ == '__main__':
	    with Pool(5) as p:
		print(p.map(f, [1, 2, 3]))
		
	---In multiprocessing, processes are spawned by creating a Process object and then calling its start() method. Process follows the API of threading.Thread. A trivial example of a multiprocess program is

   
    *    from multiprocessing import Process

	def f(name):
	    print('hello', name)

	if __name__ == '__main__':
	    p = Process(target=f, args=('bob',))
	    p.start()
	    p.join()
	    
	   
	   ---To show induvidual processes 
	   
     *     from multiprocessing import Process
		import os

		def info(title):
		    print(title)
		    print('module name:', __name__)
		    print('parent process:', os.getppid())
		    print('process id:', os.getpid())

		def f(name):
		    info('function f')
		    print('hello', name)

		if __name__ == '__main__':
		    info('main line')
		    p = Process(target=f, args=('bob',))
		    p.start()
		    p.join() 
	    
